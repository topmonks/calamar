name: Test & Deploy

on: [push]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
      - name: Current timestamp
        uses: ./.github/actions/now
      - name: Build
        env:
          REACT_APP_COMMIT_SHA: ${{ github.sha }}
          REACT_APP_BUILD_TIMESTAMP: ${{ env.NOW }}
          REACT_APP_ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_CLIENT_ACCESS_TOKEN }}
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build/
  test:
    name: Test
    needs: build
    environment:
      name: test-report
      url: ${{ steps.pages.outputs.url }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Install dependencies
      #   uses: ./.github/actions/install-dependencies
      # - name: Download build artifact
      #   uses: actions/download-artifact@master
      #   with:
      #     name: build
      #     path: build
      # - name: Install Playwright Browsers
      #   uses: ./.github/actions/install-playwright-browsers
      # - name: Start app
      #   run: npm run start:test &
      # - name: Run Playwright Tests
      #   run: npx playwright test
      # - name: Upload Argos screenshots
      #   continue-on-error: true
      #   env:
      #     ARGOS_TOKEN: ${{ secrets.ARGOS_TOKEN }}
      #   run: npx argos upload test/screenshots
      # - name: Upload test teport artifact
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: test-report
      #     path: test/report/
      #     retention-days: 14
      # - name: Deploy test report to Cloudflare Pages
      #   if: always()
      #   id: pages
      #   uses: ./.github/actions/deploy-cloudflare-pages
      #   with:
      #     apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #     project: calamar-test-reports
      #     path: test/report
  preview:
    name: Deploy / Preview
    needs: test
    environment:
      name: development
      url: ${{ steps.pages.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download build artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build
      - name: Current timestamp
        uses: ./.github/actions/now
      - name: Generate client environment
        uses: ./.github/actions/generate-client-env
        env:
          REACT_APP_PUBLISH_TIMESTAMP: ${{ env.NOW }}
          REACT_APP_ROLLBAR_ENV: development
          REACT_APP_ROLLBAR_ENABLED: true
        with:
          file: build/env.js
      - name: Deploy to Cloudflare Pages
        id: pages
        uses: ./.github/actions/deploy-cloudflare-pages
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          project: calamar
          path: build
      - name: Collect sourcemaps
        id: collect_sourcemaps
        env:
          URLS: ${{ steps.pages.outputs.url }} ${{ steps.pages.outputs.aliases }}
        run: |
          cd build; \
          for url in $URLS; do \
            for file in $(find . -name "*.js" -printf "%P "); do \
              if -f $file.map; then \
                MINIFIED_URLS="${MINIFIED_URLS} $url/$file"; \
                SOURCE_MAPS="${SOURCE_MAPS} build/$file.map"; \
              fi; \
            done; \
          done; \
          echo "${MINIFIED_URLS}"; \
          echo "${SOURCE_MAPS}"; \
          echo "minified_urls=${MINIFIED_URLS}" >> $GITHUB_OUTPUT; \
          echo "source_maps=${SOURCE_MAPS}" >> $GITHUB_OUTPUT;
      - name: Deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.1
        with:
          environment: development
          version: ${{ github.sha }}
          source_maps: ${{ steps.collect_sourcemaps.outputs.source_maps }}
          minified_urls: ${{ steps.collect_sourcemaps.outputs.minified_urls }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_SERVER_ACCESS_TOKEN }}
  deploy:
    name: Deploy / Production
    needs: test
    if: github.ref_name == 'master'
    environment:
      name: production
      url: ${{ steps.pages.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download build artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build
      - name: Current timestamp
        uses: ./.github/actions/now
      - name: Generate client environment
        uses: ./.github/actions/generate-client-env
        env:
          REACT_APP_PUBLISH_TIMESTAMP: ${{ env.NOW }}
          REACT_APP_ROLLBAR_ENV: production
          REACT_APP_ROLLBAR_ENABLED: true
        with:
          file: build/env.js
      - name: Deploy to Cloudflare Pages
        id: pages
        uses: ./.github/actions/deploy-cloudflare-pages
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          project: calamar
          path: build
